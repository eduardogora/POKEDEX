{"version":3,"sources":["logo.svg","components/navbar.jsx","components/pokemonCard.jsx","views/pokemonPage.jsx","views/mainPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Search","Menu","SubMenu","Input","Navbar","state","isPokemonPage","props","current","this","onClick","handleHomeClick","selectedKeys","mode","style","padding","backgroundColor","Item","width","textAlign","placeholder","onChange","onSearch","Component","Meta","Card","PokemonCard","name","id","image","url","type","cardColor","getPokemonInfo","a","axios","get","then","res","result","data","imageURL","sprites","other","setState","front_default","types","page","handlePokemonClick","onPokemonClick","getCardColor","cover","src","align","hoverable","title","description","Panel","Collapse","PokemonPage","experience","weight","height","moves","abilities","stats","base_experience","getStatValue","value","exit","Math","ceil","getTypeColor","color","span","margin","console","log","map","count","stat","percent","base_stat","header","move","ability","shape","icon","LeftOutlined","previousPokemon","RightOutlined","nextPokemon","Mainpage","pokemons","renderedPokemon","statePokemons","currentPage","pageSize","initalPokemon","lastPokemon","pokemonSearch","pokemonPageActive","activePokemon","activePokemonUrl","onPageChange","getPokemonsToShow","onShowSizeChange","getAllPokemon","params","URLSearchParams","results","initialPokemon","newRender","newPokemon","i","includes","push","filtered","filter","x","undefined","totalPages","length","target","pokemon","index","total","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbd84b02.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\r\nimport { Menu, Input } from 'antd';\r\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Search } = Input;\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    isPokemonPage: this.props.isPokemonPage,\r\n  };\r\n\r\n  render() {\r\n    const { current } = this.state;\r\n    return (\r\n      <div>\r\n        <Menu onClick={this.props.handleHomeClick} selectedKeys={[current]} mode=\"horizontal\" style={{ padding: 20, backgroundColor: \"#CC0000\" }}>\r\n          <Menu.Item key=\"mail\" style={{width: \"70%\", textAlign: \"center\"}}>\r\n            Pokedex\r\n          </Menu.Item>\r\n          <Menu.Item key=\"searcher\" style={{width: \"30%\", textAlign: \"center\"}}>\r\n                <Search placeholder=\"input search text\" onChange={this.props.onSearch} style={{ width: 200, padding: 10 }} />\r\n          </Menu.Item>\r\n        </Menu>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from \"react\";\r\nimport { NavLink, withRouter, Link } from \"react-router-dom\";\r\nimport { Card, Row, Col } from 'antd';\r\n\r\nimport axios from \"axios\";\r\n\r\nconst { Meta } = Card;\r\n\r\nclass PokemonCard extends Component {\r\n    state = {\r\n        name: this.props.name,\r\n        id: 0, \r\n        image: \"\",\r\n        url: this.props.url,\r\n        type: \"\",\r\n        cardColor: \"\",\r\n      };\r\n\r\n      getPokemonInfo = async () => {\r\n        await axios\r\n        .get( this.props.url)\r\n        .then((res) => {\r\n            const  result = res.data;\r\n            let imageURL = result.sprites.other[\"official-artwork\"];\r\n            this.setState({image: imageURL.front_default, id: result.id, type: result.types[0].type.name})\r\n      });\r\n    }\r\n\r\n      async componentDidMount(){\r\n        await this.getPokemonInfo();\r\n      }\r\n    \r\n      onChange = page => {\r\n        this.setState({\r\n          current: page,\r\n        });\r\n      };\r\n\r\n      handlePokemonClick = async () =>{\r\n        await this.props.onPokemonClick(this.state.name, this.state.url);\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n            <div>\r\n                <div onClick={ this.handlePokemonClick}>\r\n                    <Card \r\n                    style={{ width: \"100%\", backgroundColor: this.props.getCardColor(this.state.type) }}\r\n                    cover={\r\n                        <img src= {this.state.image} style={{width: \"100%\" }} align=\"center\"></img>\r\n                    }\r\n                    hoverable\r\n                >\r\n                    <Meta\r\n                    title= {this.state.name}\r\n                    description= {\"#\" + this.state.id}\r\n                    />\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n  }\r\n  \r\n  export default PokemonCard;","import React, {Component} from \"react\";\r\nimport { Card, Row, Col, Progress, Badge, Collapse, Button, Tooltip, } from 'antd';\r\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\r\n\r\nimport axios from \"axios\";\r\n\r\nconst { Meta } = Card;\r\nconst { Panel } = Collapse;\r\n\r\nclass PokemonPage extends Component {\r\n    state = {\r\n        name: this.props.name,\r\n        id: 0, \r\n        image: \"\",\r\n        url: this.props.url,\r\n\r\n        types: [],\r\n        experience: 0,\r\n        weight: 0,\r\n        height: 0,\r\n        moves: [],\r\n        abilities: [],\r\n        stats: [],\r\n\r\n        cardColor: \"\",\r\n      };\r\n\r\n      getPokemonInfo = async () => {\r\n        await axios\r\n        .get( this.props.url)\r\n        .then((res) => {\r\n            const  result = res.data;\r\n            let imageURL = result.sprites.other[\"official-artwork\"];\r\n            let types = result.types;\r\n            let experience = result.base_experience;\r\n            let weight= result.weight;\r\n            let height= result.height;\r\n            let moves= result.moves;\r\n            let abilities= result.abilities;\r\n            let stats= result.stats;\r\n\r\n        \r\n            this.setState({image: imageURL.front_default, id: result.id, types, experience, weight, height, moves, abilities, stats})\r\n      });\r\n    }\r\n    \r\n    getStatValue = (name, value) =>{\r\n        let exit = 0;\r\n        switch(name){\r\n            case \"hp\":\r\n                exit = Math.ceil((value*100)/255);\r\n                break\r\n            case \"attack\":\r\n                exit = Math.ceil((value*100)/210);\r\n                break\r\n            case \"defense\":\r\n                exit = Math.ceil((value*100)/230);\r\n                break\r\n            case \"special-attack\":\r\n                exit = Math.ceil((value*100)/180);\r\n                break\r\n            case \"special-defense\":\r\n                exit = Math.ceil((value*100)/230);\r\n                break\r\n            case \"speed\":\r\n                exit = Math.ceil((value*100)/232);\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        return exit;\r\n    }\r\n\r\n    getTypeColor = (name) => {\r\n        let color = \"\";\r\n\r\n        switch(name){\r\n            case \"bug\":\r\n                color = \"#D7FF77\";\r\n                break;\r\n            case \"fire\":\r\n                color = \"#FE3700\";\r\n                break;\r\n            case \"normal\":\r\n                color = \"#DACFCC\";\r\n                break;\r\n            case \"dark\":\r\n                color = \"#5F5D5D\";\r\n                break;\r\n            case \"flying\":\r\n                color = \"#B2F8FA\";\r\n                break;\r\n            case \"poison\":\r\n                color = \"#A100FF\";\r\n                break;\r\n            case \"dragon\":\r\n                color = \"#00C5D6\";\r\n                break;\r\n            case \"ghost\":\r\n                color = \"#AA70DB\";\r\n                break;\r\n            case \"psychic\":\r\n                color = \"#EB2EDA\";\r\n                break;\r\n            case \"electric\":\r\n                color = \"#EBFA00\";\r\n                break;\r\n            case \"grass\":\r\n                color = \"#27D300\";\r\n                break;\r\n            case \"rock\":\r\n                color = \"#B25500\";\r\n                break;\r\n            case \"fairy\":\r\n                color = \"#FF08E8\";\r\n                break;\r\n            case \"ground\":\r\n                color = \"#E76E00\";\r\n                break;\r\n            case \"steel\":\r\n                color = \"#C2C3BC\";\r\n                break;\r\n            case \"fighting\":\r\n                color = \"#FFA500\";\r\n                break;\r\n            case \"ice\":\r\n                color = \"#67CAD6\";\r\n                break;\r\n            case \"water\":\r\n                color = \"#006EFF\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return color;\r\n    }\r\n\r\n      async componentDidMount(){\r\n        await this.getPokemonInfo();\r\n        let cardColor = this.props.getCardColor(this.state.types[0].type.name);\r\n        await this.setState({cardColor});\r\n      }\r\n    \r\n      onChange = page => {\r\n        this.setState({\r\n          current: page,\r\n        });\r\n      };\r\n    \r\n      render() {\r\n        return (\r\n            <div>\r\n                <Row style={{backgroundColor: \"#3B4CCA\"}}>\r\n                    <Col span={6}></Col> \r\n                    <Col span={12}>\r\n                        <div onClick={this.props.onPokemonClick} style={{ margin: \"%\"}}>\r\n                        {console.log(this.state.cardColor, \"cardColor\")}\r\n                            <Card\r\n                            style={{ width: \"100%\", backgroundColor: this.state.cardColor }}\r\n                            cover={\r\n                                <img src= {this.state.image} style={{width: \"100%\" }} align=\"center\"></img>\r\n                            }\r\n                        >\r\n                            <Meta\r\n                            title= {this.state.name}\r\n                            description= {\"#\" + this.state.id}\r\n                            />\r\n                            {this.state.types.map((type) => (\r\n                                <Badge  count={type.type.name} style={{backgroundColor: this.getTypeColor(type.type.name)}}/>\r\n                            ))}\r\n                            </Card>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{backgroundColor: \"#3B4CCA\"}}>\r\n                    <Col span={6}></Col> \r\n                    <Col span={12}>\r\n                        <div onClick={this.props.onPokemonClick} style={{ margin: \"%\"}}>\r\n                            <Card\r\n                            style={{ width: \"100%\" ,backgroundColor: this.state.cardColor}}\r\n                            >\r\n                                {this.state.stats.map((stat) => (\r\n                                    <Row>\r\n                                    <Col span={6}>\r\n                                        {stat.stat.name}\r\n                                    </Col> \r\n                                    <Col span={18}>\r\n                                        <Progress percent={this.getStatValue(stat.stat.name,stat.base_stat)} />\r\n                                    </Col>\r\n                                    </Row>   \r\n                                ))}\r\n                                    <Row>\r\n                                        <Col span={8}>{\"Weight: \" + this.state.weight /10 +\" kg\"}</Col>\r\n                                        <Col span={8}>{\"Height: \" + this.state.height /10 + \"M\"}</Col>\r\n                                        <Col span={8}>{\"Exp: \" + this.state.experience}</Col>\r\n                                    </Row>\r\n                            </Card>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{backgroundColor: \"#3B4CCA\"}}>\r\n                    <Col span={6}></Col> \r\n                    <Col span={12}>\r\n                        <div>\r\n                            <Card\r\n                            style={{ width: \"100%\", backgroundColor: this.state.cardColor }}\r\n                            >\r\n                            <Collapse>\r\n                                <Panel header=\"Moves\" key=\"1\">\r\n                                    <Row>\r\n                                    {this.state.moves.map((move) => (\r\n                                        <Col span={8}>\r\n                                            <ol>{move.move.name}</ol>\r\n                                        </Col>\r\n                                    ))}\r\n                                    </Row>\r\n                                </Panel>\r\n                                <Panel header=\"Abilities\" key=\"2\">\r\n                                    <Row>\r\n                                    {this.state.abilities.map((ability) => (\r\n                                        <Col span={8}>\r\n                                            <ol>{ability.ability.name}</ol>\r\n                                        </Col>\r\n                                    ))}\r\n                                    </Row>\r\n                                </Panel>\r\n                          </Collapse>\r\n                            </Card>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{backgroundColor: \"#3B4CCA\"}}>\r\n                   <Col span={11}>\r\n                   </Col>\r\n                   <Col span={1}>\r\n                    <Tooltip title=\"search\">\r\n                        <Button shape=\"circle\" icon={<LeftOutlined />} onClick={() => this.props.previousPokemon(this.state.name)}/>\r\n                    </Tooltip>\r\n                   </Col>\r\n                   <Col span={1}>\r\n                    <Tooltip title=\"search\">\r\n                        <Button shape=\"circle\" icon={<RightOutlined />} onClick={() => this.props.nextPokemon(this.state.name)} />\r\n                    </Tooltip>\r\n                   </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n      }\r\n  }\r\n  \r\n  export default PokemonPage;","import Navbar from \"../components/navbar\";\r\nimport PokemonCard from \"../components/pokemonCard\";\r\nimport PokemonPage from \"./pokemonPage\";\r\nimport axios from \"axios\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Menu, Pagination, Row, Col } from 'antd';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass Mainpage extends Component {\r\n    state = {\r\n        pokemons: [],\r\n        renderedPokemon: [],\r\n        statePokemons: [],\r\n        currentPage: 1,\r\n        pageSize: 20,\r\n        initalPokemon: 0,\r\n        lastPokemon: 0,\r\n        pokemonSearch: \"\",\r\n\r\n        pokemonPageActive: false,\r\n        activePokemon: \"\",\r\n        activePokemonUrl: \"\",\r\n    }\r\n\r\n    onPageChange = async (page, pageSize) => {\r\n        await this.setState({\r\n          currentPage: page,\r\n          pageSize,\r\n        });\r\n        await this.getPokemonsToShow();\r\n    }\r\n\r\n    onShowSizeChange = async (page, pageSize) =>{\r\n    }\r\n\r\n    getAllPokemon = async () => {\r\n        const params = new URLSearchParams([[\"limit\", 1118]]);\r\n        await axios\r\n        .get(`https://pokeapi.co/api/v2/pokemon/`, { params })\r\n        .then((res) => {\r\n            const { results } = res.data;\r\n            this.setState({pokemons: results})\r\n      });\r\n    }\r\n\r\n    async componentDidMount(){\r\n        await this.getAllPokemon();\r\n        this.getPokemonsToShow();\r\n    }\r\n\r\n    getPokemonsToShow =  async() => {\r\n         let initialPokemon = (this.state.currentPage - 1) * this.state.pageSize;\r\n         let lastPokemon = initialPokemon + this.state.pageSize;\r\n         let newRender = [];\r\n         let newPokemon = [];\r\n         let currentPage = 1;\r\n\r\n         for(let i = 0; i < 1118; i++){\r\n             if(this.state.pokemons[i].name.includes(this.state.pokemonSearch)){\r\n                 newPokemon.push(this.state.pokemons[i])\r\n             };\r\n         }\r\n         \r\n         if(this.state.pokemonSearch !== \"\"){\r\n            for(let i = initialPokemon; i < lastPokemon; i++){\r\n                newRender.push(newPokemon[i]);\r\n             }\r\n         }else{\r\n            for(let i = initialPokemon; i < lastPokemon; i++){\r\n               newRender.push(this.state.pokemons[i]);\r\n            }\r\n         }\r\n\r\n         var filtered = newRender.filter(x => {\r\n            return x !== undefined;\r\n            });\r\n\r\n        let totalPages = (newPokemon.length / this.state.pageSize);\r\n        if (this.state.currentPage > totalPages){\r\n            currentPage = 1;\r\n        }else{\r\n            currentPage = this.state.currentPage;\r\n        }\r\n\r\n         await this.setState({initialPokemon, lastPokemon, renderedPokemon: filtered, statePokemons: newPokemon, currentPage });\r\n    }\r\n\r\n    onSearch = async (value) => {\r\n        await this.setState({pokemonSearch: value.target.value})\r\n        await this.getPokemonsToShow();\r\n    }\r\n\r\n    onPokemonClick = async(pokemon, url) =>{\r\n        await this.setState({activePokemon: pokemon, activePokemonUrl: url, pokemonPageActive: true});\r\n    }\r\n\r\n    handleHomeClick = () =>{\r\n        this.setState({pokemonPageActive: false})\r\n    }\r\n\r\n    nextPokemon = async(name) =>{\r\n        let index = 0;\r\n        for(let i = 0; i < this.state.statePokemons.length; i++){\r\n            if(name === this.state.statePokemons[i].name){\r\n                index = i;\r\n            }\r\n        }\r\n        if(index === this.state.statePokemons.length -1){\r\n            index = 0;\r\n        }else{\r\n            index += 1;\r\n        }\r\n        await this.setState({activePokemon: this.state.statePokemons[index].name, activePokemonUrl: this.state.statePokemons[index].url,});\r\n    }\r\n\r\n    previousPokemon = async(name) =>{\r\n        let index = 0;\r\n        for(let i = 0; i < this.state.statePokemons.length; i++){\r\n            if(name === this.state.statePokemons[i].name){\r\n                index = i;\r\n            }\r\n        }\r\n        if(index === 0){\r\n            index = this.state.statePokemons.length - 1;\r\n        }else{\r\n            index -= 1;\r\n        }\r\n        await this.setState({activePokemon: this.state.statePokemons[index].name, activePokemonUrl: this.state.statePokemons[index].url,});\r\n    }\r\n\r\n    getCardColor = (name) => {\r\n        let color = \"\";\r\n\r\n        switch(name){\r\n            case \"bug\":\r\n                color = \"#D7FF77\";\r\n                break;\r\n            case \"fire\":\r\n                color = \"#FE3700\";\r\n                break;\r\n            case \"normal\":\r\n                color = \"#DACFCC\";\r\n                break;\r\n            case \"dark\":\r\n                color = \"#5F5D5D\";\r\n                break;\r\n            case \"flying\":\r\n                color = \"#B2F8FA\";\r\n                break;\r\n            case \"poison\":\r\n                color = \"#A100FF\";\r\n                break;\r\n            case \"dragon\":\r\n                color = \"#00C5D6\";\r\n                break;\r\n            case \"ghost\":\r\n                color = \"#AA70DB\";\r\n                break;\r\n            case \"psychic\":\r\n                color = \"#EB2EDA\";\r\n                break;\r\n            case \"electric\":\r\n                color = \"#EBFA00\";\r\n                break;\r\n            case \"grass\":\r\n                color = \"#27D300\";\r\n                break;\r\n            case \"rock\":\r\n                color = \"#B25500\";\r\n                break;\r\n            case \"fairy\":\r\n                color = \"#FF08E8\";\r\n                break;\r\n            case \"ground\":\r\n                color = \"#E76E00\";\r\n                break;\r\n            case \"steel\":\r\n                color = \"#C2C3BC\";\r\n                break;\r\n            case \"fighting\":\r\n                color = \"#FFA500\";\r\n                break;\r\n            case \"ice\":\r\n                color = \"#67CAD6\";\r\n                break;\r\n            case \"water\":\r\n                color = \"#006EFF\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return color;\r\n      }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n        \r\n        {!this.state.pokemonPageActive \r\n            ? \r\n            <div>\r\n                <Navbar\r\n                    onSearch = {this.onSearch}\r\n                    getPokemonsToShow = {this.getPokemonsToShow}\r\n                    isPokemonPage = {this.state.pokemonPageActive}\r\n                >\r\n                </Navbar>\r\n                <Row style={{padding: \"50px\", backgroundColor: \"#3B4CCA\"}}>\r\n                    {this.state.renderedPokemon.map((pokemon) => (\r\n                        <Col span={6}>\r\n                            <PokemonCard\r\n                            key = {pokemon.name}\r\n                            name = {pokemon.name}\r\n                            url = {pokemon.url}\r\n                            onPokemonClick = {this.onPokemonClick}\r\n                            getCardColor = {this.getCardColor}\r\n                            >\r\n                            </PokemonCard>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n                <Pagination \r\n                style={{padding: \"20px\", backgroundColor: \"#3B4CCA\"}}\r\n                current={this.state.currentPage} \r\n                onChange={this.onPageChange} \r\n                total={this.state.statePokemons.length}\r\n                pageSize={this.state.pageSize} \r\n                />\r\n            </div>\r\n            : \r\n            <div>\r\n                <Navbar\r\n                    onSearch = {this.onSearch}\r\n                    getPokemonsToShow = {this.getPokemonsToShow}\r\n                    isPokemonPage = {this.state.pokemonPageActive}\r\n                    handleHomeClick = {this.handleHomeClick}\r\n                    />\r\n                <PokemonPage\r\n                key = {this.state.activePokemon}\r\n                name = {this.state.activePokemon}\r\n                url = {this.state.activePokemonUrl}\r\n                nextPokemon = {this.nextPokemon}\r\n                previousPokemon = {this.previousPokemon}\r\n                getCardColor = {this.getCardColor}\r\n                >\r\n                </PokemonPage>\r\n            </div>\r\n        }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mainpage;","import logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport Mainpage from './views/mainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Mainpage>\n      </Mainpage>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}